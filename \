#ifndef LINKED_LIST_H
#define LINKED_LIST_H

#include <stdbool.h>

struct LinkedList {

};

struct LinkedListElement {

};

// Initializes the linked list. Must be called before the list can be used.
//
// The complexity is O(1).
//
// @param list A pointer to a linked list.
// @param destory method to free the value of a list. For plain pointers this
//   may be free, for more complex data the data type's destructor, for data
//   that should not be free it should be NULL.
void linked_list_init(LinkedList *list, void (*destroy)(void *data));

// Deallocates a linked list and possibly the members.
//
// The complexity is O(n) where n is the number of elements in the list.
//
// @param list The linked list to deallocate.
void linked_list_destroy(LinkedList *list);

// Inserts a new element just after element
//
// The complexity is O(1).
//
// @param list The list to insert the element into.
// @param element THe element to insert after. If NULL then the inserted element
//   will be the new head.
// @param data A void pointer to the new data.
// @return Whether the operation was a success or not.
bool linked_list_insert_after(LinkedList *list, 
                              LinkedListElement *element, 
                              const void *data);

// Deletes the element just afte element.
//
// The complexity is O(1)
//
// @param list The list to remove the element from.
// @param element The element preceding the element to be deleted.
// @param data will point to the element that was removed.
// @return Whether the operation was a success or not.
bool linked_list_delete_after(LinkedList *list,
                              LinkedListElement *element,
                              void **data);

// The number of elements in the list.
//
// The complexity is O(1).
//
// @param list The list we want the length of.
// @return THe size of the list.
unsigned int list_size(const LinkedList *list);

// Returns the head of the linked list.
//
// Complexity: O(1)
//
// @param list THe linked list we want the head of.
// @return A pointer to the element containing the value at the head.
LinkedListElement *linked_list_head(LinkedList *list);
